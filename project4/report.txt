1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<24>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<5>>>

3. Did you receive help from anyone? List their names, status (classmate, 
   CS110 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   Aayush Shrivastava  TA          explained the concept of keygen, encrypt, and decrypt.
                                   How rsa interacts with those three programs.
   MuhammadMoiz Amjad  SI          explained how to bring the functions into keygens.
   kenikumar Patel     LA          explained the decrypt. How it should accept the values.

4. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (RSA Library)
      Approach: Make functions: keygens, encrypt, decrypt, _primes, _sample, and _choice.
      Set encrypt as x ** e % n. Set decrypt as y ** d % n.
      For _prime, make a function that returns list of primes for [lo, hi).
      For _sample, Shuffle the first elements of the prime list
        so that it can return randome prime numbers.
      For _choice, get a random element from the prime list.
      Finally, in keygens, get p and q as the random prime numbers by using _sample and _prime.
      set n and m to p * q and (p − 1) * (q − 1).
      set e to a random prime number by using _choice. Use while loop so that e can be a number
      that does not divide m.
      Find a d ∈ [1, m) such that e * d mod m == 1.
      Return the tuple(n, e, d)

      Issues and resolution:
      In _primes, I was passing 0 and 1 as the prime numbers. Thus, I made if function that ignore
      0 and 1.
      In _sample, I used class example for shuffling elements in the prime list. But, it was giving
      me an error. Thus, I just used exchange b[i], b[r] = b[r], b[i] instead.
      In keygens, an error kept showing that list is recognizing as a integers. I realized that
      it was because I put a[something] instead of a. Therefore, I was able to fix it.

   Problem 2 (Keygen Program)
      Approach: Accept lo (int) and hi (int) as command-line arguments.
      use rsa.keygen(lo, hi) to get a list containing (n, e, d).
      Finally, write the output.

      Issues and resolution: None

   Problem 3 (Encryption Program)
      Approach: Accept public-key n (int) and e (int) as command-line arguments.
      Set width as the least number of bits needed to represent message.
      Accept message to encrypt from standard input.
      Use for loop so that each letter can be encrypted till the end.
      Use the built in function ord() to turn each character in message
      Finally for the output, use rsa.dec2bin so that the output is the binary numbers

      Issues and resolution:
      For accepting the standard input, the program did not accept more than a line.
      Therefore, I had to use readAll to fix the problem.
      I did not understand the meaning of the number fo bits per character. TA helped me
      with what function to use to make it happen.


   Problem 4 (Decryption Program)
      Approach: Accept private-key n (int) and d (int) as command-line arguments.
      Get the number of bits per character (call it width).
      Accept message (binary string generated by encrypt.py) from standard input.
      Assuming l is the length of message, for i ∈ [0, l − 1) and in increments of width.
      Set s to substring of message from i to i + width (exclusive).
      Set y to decimal representation of the binary string s.
      Decrypt y. Write the character corresponding to the decrypted value,
      obtained using the built-in function chr().

      Issues and resolution:
      I did not know how to Set s to substring of message from i to i + width (exclusive).
      TA helped me with hinting that I should use the colon to make it happen.

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   It was really great to see how the functions cooperate each other to make program.
   In addition, how each program goes back and forth to make the final outcome felt so satisfied.

